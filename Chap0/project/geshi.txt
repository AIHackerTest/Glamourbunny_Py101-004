字符串格式化符号

          %c     格式化字符及其ASCII码
          %s     格式化字符串
          %d     格式化整数
          %u     格式化无符号整型
          %o     格式化无符号八进制数
          %x     格式化无符号十六进制数
          %X     格式化无符号十六进制数（大写）
          %f     格式化浮点数字，可指定小数点后的精度
          %e     用科学计数法格式化浮点数
          %E     作用同%e，用科学计数法格式化浮点数
          %g     %f和%e的简写
          %G     %f 和 %E 的简写
          %p     用十六进制数格式化变量的地址


格式化操作符辅助指令

        符号  功能
        *     定义宽度或者小数点精度
        -     用做左对齐
        +     在正数前面显示加号( + )
        <sp>  在正数前面显示空格
        \#    在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
        0     显示的数字前面填充`0`而不是默认的空格
        %     '%%'输出一个单一的'%'
        (var) 映射变量(字典参数)
        m.n.  m是显示的最小总宽度,n是小数点后的位数(如果可用的话)


指定是否补0和整数与小数的位数的几种情况

%0xd表示将整数用0补足到x位
整数的位数比x小时，用0补足 
eg:

            >>> "%03d" %33
            '033'

整数的位数比x大时，直接输出 
eg：

            >>> "%03d" %12345
            '12345'

%xd表示将整数用空格补足到x位
如果整数的位数比x小时，用空格补足 
eg:

            \>>> "%6d" %123
            '   123'

如果整数的位数比x大时，直接输出 
eg:
            \>>> "%3d" %12345
            '12345'

%.xf表示将小数中小数点后面的位数固定到x位
如果小数的位数比x大，则保留x位小数 
eg:
            \>>> "%.3f" % 3.1415926
            '3.142'

如果小数的位数比x小，则用0补足 
eg:
            \>>> "%.4f" % 3.1
            '3.1000'

如果我们不太确定用什么，那么用%s是最保险的，它会把任何数据类型转换为字符串。